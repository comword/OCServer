cmake_minimum_required(VERSION 2.8)

set(APP_NAME OCServer)
project (${APP_NAME})

set(CMAKE_MODULE_PATH
    ${CMAKE_MODULE_PATH}
    ${CMAKE_SOURCE_DIR}/CMakeModules
)

option(DEBUG_MODE "Debug or release?" ON)
option(DYNAMIC_LINKING "Use dynamic linking. Or use static to remove MinGW dependency instead."	"ON")

if(DEBUG_MODE)
  set(CMAKE_BUILD_TYPE DEBUG)
else(DEBUG_MODE)
  set(CMAKE_BUILD_TYPE RELEASE)
endif(DEBUG_MODE)

include(GetGitRevisionDescription)
git_describe(GIT_VERSION)

#add_definitions(-DBUILD_SHARED_LIBS=ON)
#set(BUILD_SHARED_LIBS ON CACHE BOOL "turn on SHARED_LIBS")

message(STATUS "${PROJECT} build environment -- \n")

message(STATUS "Build realm is: ${CMAKE_SYSTEM_NAME} ${CMAKE_HOST_SYSTEM_PROCESSOR}")

if (${CMAKE_SYSTEM_NAME} MATCHES Linux)
	set(_OS_LINUX_ 1)
endif (${CMAKE_SYSTEM_NAME} MATCHES Linux)

if (${CMAKE_SYSTEM_NAME} MATCHES FreeBSD)
	set(_OS_FREEBSD_ 1)
endif (${CMAKE_SYSTEM_NAME} MATCHES FreeBSD)

if(${CMAKE_SYSTEM_NAME} MATCHES Darwin)
	set(_OS_DARWIN_ 1)
endif(${CMAKE_SYSTEM_NAME} MATCHES Darwin)

include(CheckCXXCompilerFlag)

IF (NOT DYNAMIC_LINKING)
	SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a;.dll.a")
	SET(BUILD_SHARED_LIBRARIES OFF)
	check_cxx_compiler_flag (-static HAVE_STATIC_FLAG)
	IF(HAVE_STATIC_FLAG)
		SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static")
	ENDIF(HAVE_STATIC_FLAG)
	# Workaround for cmake link library guesser
	SET(CMAKE_EXE_LINK_DYNAMIC_C_FLAGS)       # remove -Wl,-Bdynamic
	SET(CMAKE_EXE_LINK_DYNAMIC_CXX_FLAGS)
	SET(CMAKE_SHARED_LIBRARY_C_FLAGS)         # remove -fPIC
	SET(CMAKE_SHARED_LIBRARY_CXX_FLAGS)
	SET(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS)    # remove -rdynamic
	SET(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS)
ELSE (NOT DYNAMIC_LINKING)
   add_definitions(-DBUILD_SHARED_LIBS=ON)
   set(BUILD_SHARED_LIBS ON CACHE BOOL "turn on SHARED_LIBS")
	IF(MINGW AND NOT CMAKE_CXX_COMPILER_ID MATCHES "Clang")
		# Avoid depending on MinGW runtime DLLs
		#SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++")
	ENDIF(MINGW AND NOT CMAKE_CXX_COMPILER_ID MATCHES "Clang")
ENDIF (NOT DYNAMIC_LINKING)

IF(${CMAKE_SYSTEM_NAME} MATCHES Windows)
	SET(_OS_WINDOWS_ 1)
	GET_FILENAME_COMPONENT(MINGW_BIN_DIRECTORY ${CMAKE_CXX_COMPILER} PATH)
	SET(RC_COMPILER_FILENAME "windres.exe")
	FIND_FILE(RC_COMPILER_PATH ${RC_COMPILER_FILENAME})
	IF(RC_COMPILER_PATH)
		MESSAGE(STATUS "Found .rc compiler: ${RC_COMPILER_PATH}")
	ENDIF(RC_COMPILER_PATH)
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES Windows)
